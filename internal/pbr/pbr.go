package pbr

import (
	"fmt"
	"go/ast"
	"go/printer"
	"go/token"
	"go/types"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/go/packages"
)

type gen struct {
	engine    *Engine
	pkg       *packages.Package
	buildFunc map[*ast.FuncDecl]bool
}

func newGen(pkg *packages.Package, buildFunc map[*ast.FuncDecl]bool, engine *Engine) *gen {
	return &gen{
		engine:    engine,
		pkg:       pkg,
		buildFunc: buildFunc,
	}
}

func Load() error {
	wd, err := os.Getwd()
	if err != nil {
		fmt.Println("failed to get working directory: ", err)
		return err
	}
	fmt.Println(wd)

	cfg := &packages.Config{
		// Context:    ctx,
		Mode: packages.NeedName | packages.NeedFiles | packages.NeedCompiledGoFiles | // LoadFiles
			packages.NeedImports | // LoadImports
			packages.NeedTypes | packages.NeedTypesSizes | // LoadTypes
			packages.NeedSyntax | packages.NeedTypesInfo | // LoadSyntax
			packages.NeedDeps, // LoadTypes
		Dir: wd,
		// Env:        env,
		BuildFlags: []string{"-tags=pbrinject"},
		// TODO(light): Use ParseFile to skip function bodies and comments in indirect packages.
	}

	pkgs, err := packages.Load(cfg)
	if err != nil {
		return err
	}

	for _, pkg := range pkgs {
		fmt.Println("path", pkg.PkgPath)

		for _, f := range pkg.Syntax {
			buildFuncs := make(map[*ast.FuncDecl]bool)

			ast.Inspect(f, func(n ast.Node) bool {
				fn, ok := n.(*ast.FuncDecl)
				if !ok {
					return true
				}

				if buildCall, err := findInjectorBuild(pkg.TypesInfo, fn); err != nil {
					fmt.Println("findInjectorBuild error", err.Error())
					return true
				} else if buildCall != nil {
					// inject build found
					buildFuncs[fn] = true
				}
				return true
			})

			if len(buildFuncs) > 0 {
				e := DefaultEngine()

				r := newRouteGen(e)
				routes := r.parseRoute(wd)

				g := newGen(pkg, buildFuncs, e)
				g.inject(f, routes)
			}
		}
	}

	return nil
}

func (g *gen) generate(f *ast.File) error {
	oriFilePath := g.pkg.Fset.File(f.Pos()).Name()

	filename := filepath.Base(oriFilePath)
	ext := strings.ToLower(filepath.Ext(filename))
	nonExt := filename[:len(filename)-len(ext)]
	dir := filepath.Dir(oriFilePath)
	outputPath := dir + "/" + nonExt + "_gen" + ext

	out, err := os.Create(outputPath)
	if err != nil {
		return err
	}
	defer out.Close()

	out.WriteString("// Code generated by pbr. DO NOT EDIT.\n")
	out.WriteString("\n")
	out.WriteString("//go:build !pbrinject\n")
	out.WriteString("// +build !pbrinject\n")
	out.WriteString("\n")
	out.WriteString("package " + g.pkg.Name + "\n")
	out.WriteString("\n")

	for i, decl := range f.Decls {
		printAST(token.NewFileSet(), decl)
		fmt.Print("\n")

		if err := printer.Fprint(out, token.NewFileSet(), decl); err != nil {
			return err
		}

		if i < len(f.Decls)-1 {
			out.WriteString("\n\n")
		} else {
			out.WriteString("\n") // EOF
		}
	}

	return nil
}

func (g *gen) importsFromRoutes(routes []*RoutePackage, n *namer) []*ast.ImportSpec {
	var specs []*ast.ImportSpec

	// TODO: check original imported pkg
	for _, r := range routes {
		if r.RelativePath != "." {
			newName := n.gen("pbr_route")
			spec := &ast.ImportSpec{
				Path: &ast.BasicLit{
					Kind:  token.STRING,
					Value: `"` + r.PkgPath + `"`,
				},
				Name: ast.NewIdent(newName),
			}
			r.importSpec = spec
			specs = append(specs, spec)
		}
		if len(r.SubPackages) > 0 {
			specs = append(specs, g.importsFromRoutes(r.SubPackages, n)...)
		}
	}

	return specs
}

func (g *gen) inject(f *ast.File, routes []*RoutePackage) {
	scopes := make([]*types.Scope, len(g.buildFunc))
	for fn := range g.buildFunc {
		scopes = append(scopes, g.pkg.TypesInfo.Scopes[fn.Type])
	}
	n := newNamerWithScopes(scopes)
	specs := g.importsFromRoutes(routes, n)

	astutil.Apply(f, func(c *astutil.Cursor) bool {
		// inject imports
		if imp, ok := c.Node().(*ast.ImportSpec); ok {
			if imp.Path.Value == `"github.com/serkodev/pbr"` {
				// for i := len(routes) - 1; i >= 0; i-- {
				// 	routeImp := routes[i]
				// 	if routeImp.importSpec != nil {
				// 		c.InsertAfter(routeImp.importSpec)
				// 	}
				// }
				for i := len(specs) - 1; i >= 0; i-- {
					c.InsertAfter(specs[i])
				}
				c.Delete()
			}
		} else if fn, ok := c.Node().(*ast.FuncDecl); ok {
			if g.buildFunc[fn] {
				g.injectFunction(fn, routes)
			}
		}
		return true
	}, nil)

	g.generate(f)
}

func (g *gen) injectFunction(fn *ast.FuncDecl, routes []*RoutePackage) error {
	astutil.Apply(fn.Body, func(c *astutil.Cursor) bool {
		if stmt, ok := c.Node().(ast.Stmt); ok {
			if s := getInjectorStmt(g.pkg.TypesInfo, stmt); s != nil {
				for _, arg := range s.Args {
					obj := qualifiedIdentObject(g.pkg.TypesInfo, arg)
					if obj != nil && g.engine.ValidInjectType(obj.Type()) {
						ident := arg.(*ast.Ident)
						scope := g.pkg.TypesInfo.Scopes[fn.Type]
						n := newNamer(scope)
						for _, stmt := range g.injectPkgRoute(ident, routes, n) {
							c.InsertBefore(stmt)
						}
						c.Delete()
						return true
					}
				}
			}
		}
		return true
	}, nil)
	// printAST(token.NewFileSet(), fn.Body)

	return nil
}

func (g *gen) injectPkgRoute(ident *ast.Ident, routePkgs []*RoutePackage, n *namer) []ast.Stmt {
	var stmts []ast.Stmt

	for _, routePkg := range routePkgs {
		routePkgIdent := ident
		routePkgPath := routePkg.routePath()

		imp := ""
		if routeImport := routePkg.importSpec; routeImport != nil {
			imp = routeImport.Name.Name
		}

		for _, r := range routePkg.Routes {
			rIdent := routePkgIdent
			rPath := buildRoutePath(routePkgPath, r.Path)

			if r.hasMiddleware() && g.engine.Middleware != nil {
				var groupIdent = ast.NewIdent(n.gen("grp"))
				var groupRoutePath = rPath

				if r.isRootRoute() {
					groupRoutePath = routePkgPath

					// update routePkg
					routePkgIdent = groupIdent
					routePkgPath = ""
				}

				// generate expr with template
				expr := g.engine.GenGroup(rIdent, groupRoutePath)
				stmts = append(stmts, mustParseExprF(`%s := %s`, groupIdent.Name, expr))

				rIdent = groupIdent
				rPath = ""
			}

			// sub
			callObj := imp
			if !r.isRootRoute() {
				typeVar := n.gen(strings.ToLower(r.Name))
				sub := r.Name
				if imp != "" {
					sub = imp + "." + sub
				}
				stmts = append(stmts, mustParseExprF(`%s := &%s{}`, typeVar, sub))
				callObj = typeVar
			}

			if rstmts := g.injectSels(rIdent, r.Sels, callObj, rPath); len(rstmts) > 0 {
				stmts = append(stmts, rstmts...)
			}
		}

		// sub packages
		if len(routePkg.SubPackages) > 0 {
			stmts = append(stmts, g.injectPkgRoute(routePkgIdent, routePkg.SubPackages, n)...)
		}
	}

	return stmts
}

func (g *gen) injectSels(ident *ast.Ident, sels []string, callObj string, routePath string) []ast.Stmt {
	var stmts []ast.Stmt

	for _, sel := range sels {
		var handle = sel
		if callObj != "" {
			handle = callObj + "." + handle
		}

		expr := g.engine.GenSel(ident, sel, routePath, handle)
		if expr != "" {
			stmts = append(stmts, mustParseExpr(expr))
		}
	}

	return stmts
}
