package pbr

import (
	"fmt"
	"go/ast"
	"go/printer"
	"go/token"
	"go/types"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/go/packages"
)

type injectConfig struct {
	engine *engine
	ident  *ast.Ident
}

type gen struct {
	pkg    *packages.Package
	routes []*RoutePackage
}

func newGen(pkg *packages.Package, routes []*RoutePackage) *gen {
	return &gen{
		pkg:    pkg,
		routes: routes,
	}
}

func Load(wd string, env []string) error {
	cfg := &packages.Config{
		Mode: packages.NeedName | packages.NeedFiles | packages.NeedCompiledGoFiles | // LoadFiles
			packages.NeedImports | // LoadImports
			packages.NeedTypes | packages.NeedTypesSizes | // LoadTypes
			packages.NeedSyntax | packages.NeedTypesInfo | // LoadSyntax
			packages.NeedDeps, // LoadTypes
		Dir:        wd,
		Env:        env,
		BuildFlags: []string{"-tags=pbrinject"},
	}
	pkgs, err := packages.Load(cfg)
	if err != nil {
		return err
	}

	// TODO: lazy load
	engines := defaultEngines()

	for _, pkg := range pkgs {
		fmt.Println("path", pkg.PkgPath)

		for _, f := range pkg.Syntax {
			injectFuncsConfigSet := make(map[*ast.FuncDecl]*injectConfig)

			ast.Inspect(f, func(n ast.Node) bool {
				fn, ok := n.(*ast.FuncDecl)
				if !ok {
					return true
				}

				buildCall, err := findInjectorBuild(pkg.TypesInfo, fn)
				if err != nil {
					fmt.Println("findInjectorBuild error", err.Error())
					return true
				}

				if buildCall != nil {
					// inject build found, assign engine
					for _, arg := range buildCall.Args {
						if obj := qualifiedIdentObject(pkg.TypesInfo, arg); obj != nil {
							for _, e := range engines {
								if e.ValidInjectType(obj.Type()) {
									injectFuncsConfigSet[fn] = &injectConfig{
										ident:  arg.(*ast.Ident),
										engine: e,
									}
									return true
								}
							}
						}
					}
				}
				return true
			})

			// TODO: support more then 1 func
			if len(injectFuncsConfigSet) == 1 {
				for _, config := range injectFuncsConfigSet {
					e := config.engine
					r := newRouteGen(e.TargetSels(), e.MiddlewareSelector())
					routes := r.parseRoute(wd)

					g := newGen(pkg, routes)
					g.inject(f, injectFuncsConfigSet)
				}
			}
		}
	}

	return nil
}

func (g *gen) generate(f *ast.File) error {
	oriFilePath := g.pkg.Fset.File(f.Pos()).Name()

	filename := filepath.Base(oriFilePath)
	ext := strings.ToLower(filepath.Ext(filename))
	nonExt := filename[:len(filename)-len(ext)]
	dir := filepath.Dir(oriFilePath)
	outputPath := dir + "/" + nonExt + "_gen" + ext

	out, err := os.Create(outputPath)
	if err != nil {
		return err
	}
	defer out.Close()

	out.WriteString("// Code generated by pbr. DO NOT EDIT.\n")
	out.WriteString("\n")
	out.WriteString("//go:build !pbrinject\n")
	out.WriteString("// +build !pbrinject\n")
	out.WriteString("\n")
	out.WriteString("package " + g.pkg.Name + "\n")
	out.WriteString("\n")

	for i, decl := range f.Decls {
		printAST(token.NewFileSet(), decl)
		fmt.Print("\n")

		if err := printer.Fprint(out, token.NewFileSet(), decl); err != nil {
			return err
		}

		if i < len(f.Decls)-1 {
			out.WriteString("\n\n")
		} else {
			out.WriteString("\n") // EOF
		}
	}

	return nil
}

func (g *gen) inject(f *ast.File, injectFuncsConfigSet map[*ast.FuncDecl]*injectConfig) {
	// build imports
	scopes := make([]*types.Scope, len(injectFuncsConfigSet))
	for fn := range injectFuncsConfigSet {
		scopes = append(scopes, g.pkg.TypesInfo.Scopes[fn.Type])
	}
	n := newNamerWithScopes(scopes)
	specs, routePackagesImports := g.importsFromRoutes(g.routes, n)

	astutil.Apply(f, func(c *astutil.Cursor) bool {
		if imp, ok := c.Node().(*ast.ImportSpec); ok {
			// inject imports
			if imp.Path.Value == `"github.com/serkodev/pbr"` {
				for _, spec := range specs {
					c.InsertBefore(spec)
				}
				c.Delete()
			}
		} else if fn, ok := c.Node().(*ast.FuncDecl); ok {
			// inject body
			if injectConfig, ok := injectFuncsConfigSet[fn]; ok {
				ident := injectConfig.ident
				scope := g.pkg.TypesInfo.Scopes[fn.Type]
				n := newNamer(scope)
				stmts := g.buildInjectStmts(injectConfig.engine, ident, g.routes, routePackagesImports, n)

				block := &ast.BlockStmt{List: stmts}
				fn.Body = block
			}
		}
		return true
	}, nil)

	g.generate(f)
}

func (g *gen) importsFromRoutes(routes []*RoutePackage, n *namer) ([]*ast.ImportSpec, map[*RoutePackage]*ast.ImportSpec) {
	var specs []*ast.ImportSpec
	routePackagesImports := make(map[*RoutePackage]*ast.ImportSpec)
	for _, r := range routes {
		if r.RelativePath != "." {
			newName := n.gen("pbr_route")
			spec := &ast.ImportSpec{
				Path: &ast.BasicLit{
					Kind:  token.STRING,
					Value: `"` + r.PkgPath + `"`,
				},
				Name: ast.NewIdent(newName),
			}
			routePackagesImports[r] = spec
			specs = append(specs, spec)
		}
		// sub packages
		if len(r.SubPackages) > 0 {
			subSpecs, subImports := g.importsFromRoutes(r.SubPackages, n)
			specs = append(specs, subSpecs...)
			for k, v := range subImports {
				routePackagesImports[k] = v
			}
		}
	}
	return specs, routePackagesImports
}

func (g *gen) buildInjectStmts(e *engine, ident *ast.Ident, routePkgs []*RoutePackage, routePackagesImports map[*RoutePackage]*ast.ImportSpec, n *namer) []ast.Stmt {
	var stmts []ast.Stmt

	for _, routePkg := range routePkgs {
		routePkgIdent := ident
		routePkgPath := routePkg.routePath()

		imp := ""
		if routeImport, ok := routePackagesImports[routePkg]; ok {
			imp = routeImport.Name.Name
		}

		for _, r := range routePkg.Routes {
			rIdent := routePkgIdent
			rPath := buildRoutePath(routePkgPath, r.Path)

			if r.hasMiddleware() && e.Middleware != nil {
				var groupIdent = ast.NewIdent(n.gen("grp"))
				var groupRoutePath = rPath

				if r.isRootRoute() {
					groupRoutePath = routePkgPath

					// update routePkg
					routePkgIdent = groupIdent
					routePkgPath = ""
				}

				// generate expr with template
				expr := e.GenGroup(rIdent, groupRoutePath)
				stmts = append(stmts, mustParseExprF(`%s := %s`, groupIdent.Name, expr))

				rIdent = groupIdent
				rPath = ""
			}

			callObj := imp

			// sub
			if !r.isRootRoute() {
				typeVar := n.gen(strings.ToLower(r.Name))
				sub := r.Name
				if imp != "" {
					sub = imp + "." + sub
				}
				stmts = append(stmts, mustParseExprF(`%s := &%s{}`, typeVar, sub))
				callObj = typeVar
			}

			// build sels
			for _, sel := range r.Sels {
				var selector = sel
				if callObj != "" {
					selector = callObj + "." + selector
				}
				if expr := e.GenSel(rIdent, sel, rPath, selector); expr != "" {
					stmts = append(stmts, mustParseExpr(expr))
				}
			}
		}

		// sub packages
		if len(routePkg.SubPackages) > 0 {
			stmts = append(stmts, g.buildInjectStmts(e, routePkgIdent, routePkg.SubPackages, routePackagesImports, n)...)
		}
	}

	return stmts
}
